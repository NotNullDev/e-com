// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String         @id @default(cuid())
  name                       String?
  email                      String?        @unique
  emailVerified              DateTime?
  image                      String?
  accounts                   Account[]
  sessions                   Session[]
  roles                      UserRole[]
  productsToSell             Product[]
  conversationsWithOwnership Conversation[] @relation(name: "conversation_owner")
  ChatMessage                ChatMessage[]
  conversations              Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  SELLER
  USER
}

enum DealType {
  HOT
  HIT
  NONE
}

enum Category {
  Electronics
  Fashion
  Sport
  Toys_and_hobbies
  Health
}

model Product {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  title           String
  description     String
  stock           Int
  price           Float
  previewImageUrl String
  images          String[]
  dealType        DealType
  shippingTime    Int
  views           BigInt
  boughtCount     BigInt
  lastBoughtAt    DateTime?  @default(now())
  seller          User       @relation(fields: [userId], references: [id])
  categories      Category[]
  rating          Int
  userId          String
}

model Conversation {
  id        BigInt        @id @default(autoincrement())
  messages  ChatMessage[]
  title     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  owner     User          @relation(fields: [userId], references: [id], name: "conversation_owner")

  participitants User[]
  userId         String
}

model ChatMessage {
  id      BigInt @id @default(autoincrement())
  owner   User   @relation(fields: [onwerId], references: [id])
  content String

  createdAt DateTime @default(now())
  seen      Boolean  @default(false)

  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId BigInt?
  onwerId        String
}
